   local MinimizeGui = Instance.new("ScreenGui")
	MinimizeGui.Name = "MinimizeGui"
	MinimizeGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
	MinimizeGui.ResetOnSpawn = false

	-- Create the minimize button with centered positioning
	local MinimizeButton = Instance.new("TextButton")
	MinimizeButton.Name = "MinimizeButton"
	MinimizeButton.Parent = MinimizeGui
	MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	MinimizeButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
	MinimizeButton.AnchorPoint = Vector2.new(0.5, 0.5)
	MinimizeButton.Position = UDim2.new(0.5, 0, 0.5, 0)
	MinimizeButton.Size = UDim2.new(0, 80, 0, 40)
	MinimizeButton.Font = Enum.Font.GothamBold
	MinimizeButton.Text = "Close"
	MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	MinimizeButton.TextSize = 16.000

	-- Add corner radius
	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 6)
	UICorner.Parent = MinimizeButton

	-- Create X button for removal
	local CloseButton = Instance.new("TextButton")
	CloseButton.Name = "CloseButton"
	CloseButton.Parent = MinimizeButton
	CloseButton.BackgroundTransparency = 1
	CloseButton.Position = UDim2.new(1, -20, 0, 0)
	CloseButton.Size = UDim2.new(0, 20, 0, 20)
	CloseButton.Font = Enum.Font.GothamBold
	CloseButton.Text = "×"
	CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	CloseButton.TextSize = 16.000
	CloseButton.ZIndex = 2

	-- Close button functionality
	CloseButton.MouseButton1Click:Connect(function()
		-- Destroy the MinimizeButton and CloseButton
		MinimizeButton:Destroy()
		CloseButton:Destroy()
		-- Optionally, destroy the entire GUI if needed
		MinimizeGui:Destroy()
	end)



	-- Make button draggable
	local UserInputService = game:GetService("UserInputService")
	local dragging
	local dragStart
	local startPos

	MinimizeButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = MinimizeButton.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
			local delta = input.Position - dragStart
			MinimizeButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)

	-- Add hover effects for Event button
	MinimizeButton.MouseEnter:Connect(function()
		game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
			BackgroundColor3 = Color3.fromRGB(40, 40, 40)
		}):Play()
	end)

	MinimizeButton.MouseLeave:Connect(function()
		game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
			BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		}):Play()
	end)

	-- Add hover effects for close button
	CloseButton.MouseEnter:Connect(function()
		game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
			TextColor3 = Color3.fromRGB(255, 100, 100)
		}):Play()
	end)

	CloseButton.MouseLeave:Connect(function()
		game:GetService("TweenService"):Create(CloseButton, TweenInfo.new(0.2), {
			TextColor3 = Color3.fromRGB(255, 255, 255)
		}):Play()
	end)

	local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
	local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
	local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

	game:GetService("ReplicatedStorage").Packages.Knit.Services.WrestleService.RF.OnAutoFight:InvokeServer()

	local Window = Fluent:CreateWindow({
		Title = "Arm ",
		SubTitle = "by gbao",
		TabWidth = 160,
		Size = UDim2.fromOffset(580, 460),
		Acrylic = true, 
		Theme = "Dark",
		MinimizeKey = Enum.KeyCode.LeftControl,
		OnDestroy = function()
			local fadeOut = game:GetService("TweenService"):Create(MinimizeGui, TweenInfo.new(0.5), {
				Transparency = 1
			})
			fadeOut:Play()
			fadeOut.Completed:Connect(function()
				MinimizeGui:Destroy()
			end)
		end
	})

	local Tabs = {
		Main = Window:AddTab({ Title = "Main", Icon = "" }),
		Egg = Window:AddTab({ Title = "Egg", Icon = "" }),
		Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })

	}
	-- Initialize state
	local isMinimized = false
	Window:Minimize(false)

	-- Regular minimize/maximize functionality
	MinimizeButton.MouseButton1Click:Connect(function()
		isMinimized = not isMinimized
		Window:Minimize(isMinimized)

		local textTween = game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
			TextTransparency = 1
		})

		textTween:Play()
		textTween.Completed:Connect(function()
			MinimizeButton.Text = isMinimized and "Open" or "Close"
			game:GetService("TweenService"):Create(MinimizeButton, TweenInfo.new(0.2), {
				TextTransparency = 0
			}):Play()
		end)
	end)

	-- Close button functionality 
	CloseButton.MouseButton1Click:Connect(function()
		MinimizeGui:Destroy()
		Window:Destroy()
	end)

local Options = Fluent.Options
local VirtualInputManager = game:GetService("VirtualInputManager")
local npcPath = workspace.GameObjects.RngNPCs.BlossomVillage.Npc

local isAutoFarming = false
local activeThreads = {}

-- Helper to manage threads
local function stopThread(threadName)
    if activeThreads[threadName] then
        activeThreads[threadName] = false
    end
end

local function startThread(threadName, func)
    stopThread(threadName) -- Stop any existing thread with the same name
    activeThreads[threadName] = true
    task.defer(function()
        while activeThreads[threadName] do
            func()
        end
    end)
end

-- Function to update proximity prompts
local function updateProximityPrompts(folder)
    for _, descendant in ipairs(folder:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            descendant.HoldDuration = 0 -- Đặt thời gian giữ phím E = 0
            descendant.Style = Enum.ProximityPromptStyle.Default
            descendant.MaxActivationDistance = 6 -- Tăng khoảng cách kích hoạt
        end
    end
end


-- Function for Auto NPC Farming
local function interactWithNPC()
    task.wait(0.1) -- Đợi một chút trước khi gửi phím
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

local AutoBeatNPCToggle = Tabs.Main:AddToggle("AutoBeatNPC", {
    Title = "Auto Beat NPC",
    Default = false
})

AutoBeatNPCToggle:OnChanged(function()
    isAutoFarming = AutoBeatNPCToggle.Value

    if isAutoFarming then
        -- Cập nhật ProximityPrompt cho tất cả các NPC hiện tại trong npcPath
        for _, npc in ipairs(npcPath:GetChildren()) do
            if npc:IsA("Model") and npc:FindFirstChild("Table") and npc.Table:FindFirstChild("PlayerRoot") then
                updateProximityPrompts(npc) -- Cập nhật ProximityPrompt cho NPC
            end
        end

        -- Lắng nghe sự kiện ChildAdded để cập nhật các NPC mới
        npcPath.ChildAdded:Connect(function(child)
            if child:IsA("Model") and child:FindFirstChild("Table") and child.Table:FindFirstChild("PlayerRoot") then
                updateProximityPrompts(child) -- Cập nhật ProximityPrompt cho NPC mới
            end
        end)

        -- Tiến hành tương tác với NPC
        startThread("NPCFarm", function()
            while isAutoFarming do
                for _, npc in ipairs(npcPath:GetChildren()) do
                    if not isAutoFarming then break end
                    if npc:IsA("Model") and npc:FindFirstChild("Table") and npc.Table:FindFirstChild("PlayerRoot") then
                        local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if humanoid then   
                            humanoid.CFrame = npc.Table.PlayerRoot.CFrame
                            task.wait(0.5) -- Short delay to avoid overlapping actions
                            interactWithNPC()
                            task.wait(3.5)
                        end
                    end
                end
                task.wait(1)
            end
        end)
    else
        stopThread("NPCFarm")
    end
end)

-- Function for Auto Buying
local AutoBuyToggle = Tabs.Main:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

local BlackMarketDropdown = Tabs.Main:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        startThread("AutoBuy", function()
            for i = 1, 3 do
                for number, isSelected in pairs(BlackMarketDropdown.Value) do
                    if not AutoBuyToggle.Value then break end
                    if isSelected then
                        local args = {
                            [1] = "Treasure Merchant",
                            [2] = number
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                        task.wait(10)
                    end
                end
            end
            task.wait(90) -- Wait 90 seconds before next cycle
        end)
    else
        stopThread("AutoBuy")
    end
end)

-- Function for Auto Claim Daily Reward
local AutoClaimRewardToggle = Tabs.Main:AddToggle("AutoClaimReward", {
    Title = "Auto Claim Daily Reward",
    Default = false
})

AutoClaimRewardToggle:OnChanged(function()
    if AutoClaimRewardToggle.Value then
        startThread("AutoClaimReward", function()
            game:GetService("ReplicatedStorage").Packages.Knit.Services.DailyRewardService.RE.onClaimReward:FireServer()
            task.wait(1800) -- Wait 30 minutes before claiming again
        end)
    else
        stopThread("AutoClaimReward")
    end
end)

-- Thêm Dropdown để chọn tên trứng
local EggDropdown = Tabs.Egg:AddDropdown("EggDropdown", {
    Title = "Chọn Tên Trứng",
    Values = {"GhostPirate"}, -- Danh sách các trứng có thể mở
    Multi = false, -- Chỉ được chọn một loại trứng
    Default = "Ultimate" -- Giá trị mặc định
})

-- Thêm nút chuyển đổi (toggle) Auto Egg
local AutoEgg = Tabs.Egg:AddToggle("AutoEGG", {
    Title = "Auto Mở Trứng",
    Default = false
})

-- Biến để kiểm soát vòng lặp
local autoEggLoop = false

AutoEgg:OnChanged(function()
    autoEggLoop = AutoEgg.Value -- Bật hoặc tắt vòng lặp dựa trên giá trị Toggle

    if autoEggLoop then
        while autoEggLoop do
            -- Lấy giá trị trứng được chọn từ Dropdown
            local selectedEgg = EggDropdown.Value or "Ultimate" -- Mặc định là "Ultimate" nếu không có giá trị

            local args = {
                [1] = selectedEgg, -- Tên trứng được chọn
                [2] = nil, -- Placeholder for unknown argument
                [3] = nil, -- Triple Egg (Gamepass)
                [4] = false, -- Auto Egg (Gamepass)
                [5] = nil, -- Placeholder for unknown argument
                [6] = true -- Max Egg
            }

            -- Gửi yêu cầu đến máy chủ để mở trứng
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
        end
    end
end)

local AutoTrainingToggle = Tabs.Main:AddToggle("AutoTraining", {
    Title = "Auto Training Barbell",
    Default = false
})

AutoTrainingToggle:OnChanged(function()
    if AutoTrainingToggle.Value then
        startThread("AutoTraining", function()
            while AutoTrainingToggle.Value do
                -- Chọn Barbell sau mỗi 4 giây
		local args = {
    			[1] = "TreasureIsland",
    			[2] = "Dumbells",
    			[3] = "TreasureIsland12"
		}
		game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onEquipRequest"):FireServer(unpack(args))    
                -- Lặp onClick 80 lần mỗi 0.05 giây (tương đương 4 giây)
                for i = 1, 80 do
                    if not AutoTrainingToggle.Value then break end
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                    task.wait(0.05)
                end
            end
        end)
    else
        stopThread("AutoTraining")
    end
end)

local AutoRollAuraToggle = Tabs.Egg:AddToggle("AutoRollAura", {
    Title = "Auto Roll Aura",
    Default = false
})

AutoRollAuraToggle:OnChanged(function()
    isAutoRollingAura = AutoRollAuraToggle.Value
    if isAutoRollingAura then
        startThread("RollAura", function()
            while isAutoRollingAura do
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AuraService"):WaitForChild("RF"):WaitForChild("Roll"):InvokeServer()
                task.wait(1) 
            end
        end)
    else
        stopThread("RollAura")
    end
end)

local FightSection = Tabs.Main:AddSection("Auto Fight")

local modelNames = {}
local models = {}
local armWrestlingFolder = workspace.GameObjects.ArmWrestling

local function findModels(folder)
    for _, item in pairs(folder:GetChildren()) do
        if item:IsA("Folder") and item.Name ~= "PVP" then
            local npcFolder = item:FindFirstChild("NPC")
            if npcFolder then
                for _, npc in pairs(npcFolder:GetChildren()) do
                    if npc:IsA("Model") then
                        table.insert(models, npc)
                        table.insert(modelNames, npc.Name)
                    end
                end
            end
        end
    end
end

local function sortModels()
    table.sort(models, function(a, b)
        return a.Name < b.Name
    end)
    table.sort(modelNames)
end

findModels(armWrestlingFolder)
sortModels()

-- Reordered UI Elements (Dropdown at top)
local modelDropdown = Tabs.Main:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Default = modelNames[1],
})

local function getFolderNumber(bossName)
    for _, folder in pairs(armWrestlingFolder:GetChildren()) do
        if folder:IsA("Folder") and folder:FindFirstChild("NPC") then
            if folder.NPC:FindFirstChild(bossName) then
                return folder.Name
            end
        end
    end
    return nil
end

-- Auto Fight in middle
local AutoFightToggle = Tabs.Main:AddToggle("AutoFight", {Title = "Auto Fight", Default = false })
AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        while AutoFightToggle.Value do
            local selectedBoss = modelDropdown.Value
            if selectedBoss then
                local folderNumber = getFolderNumber(selectedBoss)
                if folderNumber then
                    local npcTable = workspace.GameObjects.ArmWrestling[folderNumber].NPC[selectedBoss].Table
                    
                    local args = {
                        [1] = selectedBoss,
                        [2] = npcTable,
                        [3] = folderNumber
                    }

                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                end
            end
            wait(2) -- Changed to 2 seconds
        end
    end
end)

-- Auto Click at bottom
local AutoClickToggle = Tabs.Main:AddToggle("AutoClick", {Title = "Auto Click", Default = false })
AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        while AutoClickToggle.Value do
            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
            wait(0.1) -- Changed to 0.1 seconds
        end
    end
end)

modelDropdown:OnChanged(function(Value) end)


-- SaveManager and InterfaceManager Setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 5
})

-- Load Auto-Config
SaveManager:LoadAutoloadConfig()
