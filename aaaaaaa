-- Preload the Rayfield library and minimize HTTP requests
-- Attempt to load Rayfield
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield', true))()
end)

-- Notify the user if Rayfield failed to load
if not success then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Error",
        Text = "Failed to load Rayfield. Your executor may not support this script.",
        Duration = 10
    })
    warn("Failed to load Rayfield. Please check the URL or your executor compatibility.")
    return
end

-- Create the main window configuration
local Window = Rayfield:CreateWindow({
    Name = "AWS BY IAMRICH",
    LoadingTitle = "ARM Wrestle Simulator",
    LoadingSubtitle = "by YADIEL",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Rayfield"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false
})


    local MainTab = Window:CreateTab("Egg")
    local MainSection = MainTab:CreateSection("All Eggs")
    local Paragraph = MainTab:CreateParagraph({
        Title = "All the eggs will open the max you can",
        Content = "MX"
    })
    local Paragraph = MainTab:CreateParagraph({
        Title = "Use the search icon above and enter the name of the egg.",
        Content = "TO MORE EASY"
    })
    local Paragraph = MainTab:CreateParagraph({
        Title = "Earth egg no work",
        Content = "bug"
    })
    local Paragraph = MainTab:CreateParagraph({
        Title = "Molton egg no work",
        Content = "bug"
    })

    -- Define a toggle state
    local bool = false

    -- Create Toggle for Egg Opening
    local Toggle = MainTab:CreateToggle({
        Name = "Icy",
        CurrentValue = false,
        Flag = "Toggle1", -- Unique identifier for the configuration file
        Callback = function(Value)
            bool = Value -- Update the toggle state
            while bool do
                task.wait() -- Better alternative to wait() for performance
                -- Invoke the EggService with specific arguments
                local args = {
                    [1] = "Icy", -- Name of the Egg
                    [2] = nil, -- Placeholder for unknown argument
                    [3] = nil, -- Triple Egg (Gamepass)
                    [4] = false, -- Auto Egg (Gamepass)
                    [5] = nil, -- Placeholder for unknown argument
                    [6] = true -- Max Egg
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
        end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Lava",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                task.wait()
                -- remote here
                    local args = {
        [1] = "Lava", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Blackhole",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Blackhole", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Crystal",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Crystal", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Year2025",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Year2025", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Solar",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Solar", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Moon",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Moon", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Ice",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Ice", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Burning",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Burning", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Coconut",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Coconut", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Palm",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Palm", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Treasure",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Treasure", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Clam",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Clam", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "KingFish",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "KingFish", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Poseidon",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Poseidon", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Rust",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Rust", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Widget",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Widget", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Atom",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Atom", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Iridescent",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Iridescent", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Mutant",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Mutant", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Nuclear",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Nuclear", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "TRex",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "TRex", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Herbivore",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Herbivore", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Pterodactyl",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Pterodactyl", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Mystic",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Mystic", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "DinoFossil",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "DinoFossil", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Gem",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Gem", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Void",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Void", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Wormhole",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Wormhole", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Nebula",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Nebula", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Star",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Star", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Meteor",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Earth", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })


    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Cyberpunk",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Cyberpunk", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Deepsea",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Deepsea", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Rocket",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Rocket", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Gladius",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Gladius", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Arena",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Arena", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Lionheart",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Lionheart", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Praetorian",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Praetorian", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Ember",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Ember", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Inferno",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Inferno", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Eternal",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Eternal", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Heated",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Heated", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Mushroom",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Mushroom", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Berserker",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Berserker", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Pixie",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Pixie", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Critters",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Critters", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Iced",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Iced", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Frozen",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Frozen", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Miner",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Miner", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Bandit",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Bandit", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Kingdom",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Kingdom", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Knight",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Knight", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Paradise",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Paradise", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Orc",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Orc", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Evil",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Evil", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Virtous",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Virtous", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Starlight",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Starlight", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Rift",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Rift", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Twilight",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Twilight", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Dream",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Dream", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Matrix",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Matrix", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

    local bool = false

    local Toggle = MainTab:CreateToggle({
    Name = "Undercover",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
                        bool = not bool
            while bool do
                wait()
                -- remote here
                    local args = {
        [1] = "Undercover", -- name Egg
        [2] = nil, -- idk
        [3] = nil, -- Tripple Egg (gamepass)
        [4] = false, -- Auto Egg (gamepass)
        [5] = nil, -- idk
        [6] = true -- max egg
    }

    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
            end
    end,
    })

   
Rayfield:LoadConfiguration()
