local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Arm ",
    SubTitle = "by gbao",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl })

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Add timer variables at top
local timerText = workspace.Zones.ChristmasEvent.Interactables.SnowstormTimer.Timer.Timer.UpdateTimer

local function getTimerSeconds()
    local text = timerText.Text
    local minutes, seconds = text:match("(%d+)M (%d+)S")
    if minutes and seconds then
        return tonumber(minutes) * 60 + tonumber(seconds)
    end
    return 0
end

-- Add after timer variables
spawn(function()
    while wait(10) do
        local timeLeft = getTimerSeconds()
        local minutes = math.floor(timeLeft / 60)
        local seconds = timeLeft % 60
    end
end)

-- ...rest of existing code...
local NPCSection = Tabs.Main:AddSection("Auto NPC Farm")
local VirtualInputManager = game:GetService("VirtualInputManager")
local npcFolderPath = workspace.GameObjects.ArmWrestling.PrisonEvent.NPC
local snowstormPath = workspace.GameObjects.RngNPCs["PrisonEvent-Underground"].Npc
local isAutoFarming = false
local isBossFighting = false
local function updateProximityPrompts(folder)
    for _, descendant in ipairs(folder:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            descendant.HoldDuration = 0
            descendant.Style = Enum.ProximityPromptStyle.Default
            descendant.MaxActivationDistance = 6
        end
    end
end

local function simulateKeyPress()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    task.wait(0.5)
    task.wait(1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

local AutoBeatNPCToggle = Tabs.Main:AddToggle("AutoBeatNPC", {
    Title = "Auto Beat NPC",
    Description = "Auto Fight Underground NPCs. This will stop for a few seconds before a snowstorm event ends/starts, to prevent it from breaking. If you experience the issue where the npc can't be beat, after 20 seconds this script will teleport to the rift world, and fix this issue.)",
    Description = "Auto Fight Underground NPCs. This will stop for a few seconds before a snowstorm event ends/starts, to prevent it from breaking.)",
    Default = false
})

AutoBeatNPCToggle:OnChanged(function()
    isAutoFarming = AutoBeatNPCToggle.Value

    if isAutoFarming then
        -- Start teleport check
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                local currentTime = tick()
                local timeSinceLastRemote = currentTime - lastRemoteInvokeTime
                
                -- Only teleport if remote hasn't been invoked in 20 seconds
                if timeSinceLastRemote >= 20 then
                    print("No remote invoke detected for 20 seconds, triggering teleport")
                    handleTeleport()
                end
                wait(15)
            end
        end)
        
        -- Start proximity prompt updates
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                local timeLeft = getTimerSeconds()
                if timeLeft > 7 then
                    updateProximityPrompts(snowstormPath)
                end
                wait(1)
            end
        end)
        
        -- Start key simulation
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                local timeLeft = getTimerSeconds()
                
                if timeLeft > 7 then
                    local npcs = snowstormPath:GetChildren()
                    if #npcs > 0 then
                        simulateKeyPress()
                    end
                end
                
                task.wait(1.2)
            end
        end)
        
        -- Main NPC farming loop
        spawn(function()
            while true do
                if not AutoBeatNPCToggle.Value then break end
                local timeLeft = getTimerSeconds()
                
                if timeLeft > 7 then
                    local npcs = snowstormPath:GetChildren()
                    if #npcs > 0 then
                        for _, npc in ipairs(npcs) do
                            if not AutoBeatNPCToggle.Value then break end
                            -- Recheck timer during loop
                            if getTimerSeconds() <= 7 then break end
                            
                            if npc:IsA("Model") and npc:FindFirstChild("Table") and 
                               npc.Table:FindFirstChild("PlayerRoot") then
                                local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                                if humanoid then
                                    humanoid.CFrame = npc.Table.PlayerRoot.CFrame
                                    wait(3.6)
                                end
                            end
                        end
                    end
                else
                    
                    wait(2.5)
                    wait(1)
                end
            end
        end)
    end
end)
local TowerSection = Tabs.Main:AddSection("Towers")

-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use All Prison Cave Keys (250x)",
    Description = "Use All Prison Cave Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "PrisonCave",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Police Shakedown Keys (250x)",
    Description = "Use All Police Shakedown Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "PoliceShakedown",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})
local MerchantSection = Tabs.Main:AddSection("Merchant")

local BlackMarketDropdown = Tabs.Main:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Main:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Black Market",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)

local WheelSection = Tabs.Main:AddSection("Wheel")

-- Spin Amount Dropdown
local SpinDropdown = Tabs.Main:AddDropdown("SpinAmount", {
    Title = "Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x"
})

-- Auto Spin Toggle
local AutoSpinToggle = Tabs.Main:AddToggle("AutoSpin", {
    Title = "Auto Spin",
    Default = false
})

AutoSpinToggle:OnChanged(function()
    if AutoSpinToggle.Value then
        spawn(function()
            while true do
                if not AutoSpinToggle.Value then break end
                
                local args = {
                    [1] = "Hidden Roulette",
                    [2] = SpinDropdown.Value == "3x" and "x10" or SpinDropdown.Value == "10x" and "x25" or nil
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                
                -- Dynamic wait times based on spin amount
                local waitTime = SpinDropdown.Value == "1x" and 2 or SpinDropdown.Value == "3x" and 0.5 or 0.3
                wait(waitTime)
            end
        end)
    end
end)

-- Auto Contraband Toggle
local AutoContrabandToggle = Tabs.Main:AddToggle("AutoContraband", {
    Title = "Auto Contraband Crate",
    Default = false
})

AutoContrabandToggle:OnChanged(function()
    if AutoContrabandToggle.Value then
        spawn(function()
            while true do
                if not AutoContrabandToggle.Value then break end
                
                local args = {
                    [1] = "Contraband Crate"
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemCrateService.RF.Spin:InvokeServer(unpack(args))
                wait(1)
            end
        end)
    end
end)

local OtherSection = Tabs.Main:AddSection("Scripts")
    OtherSection:AddButton({
        Title = "Anti AFK",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/batusz/main/roblox/__Anti__Afk__Script__", true))()
    end
})



  

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
